{"/home/travis/build/npmtest/node-npmtest-vue-loader/test.js":"/* istanbul instrument in package npmtest_vue_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vue-loader/lib.npmtest_vue_loader.js":"/* istanbul instrument in package npmtest_vue_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vue_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vue_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vue-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vue-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vue_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vue_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vue_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vue_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vue_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vue_loader.__dirname + '/lib.npmtest_vue_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vue-loader/node_modules/vue-loader/index.js":"module.exports = require('./lib/loader')\n","/home/travis/build/npmtest/node-npmtest-vue-loader/node_modules/vue-loader/lib/loader.js":"var path = require('path')\nvar parse = require('./parser')\nvar genId = require('./utils/gen-id')\nvar normalize = require('./utils/normalize')\nvar loaderUtils = require('loader-utils')\nvar querystring = require('querystring')\n\n// internal lib loaders\nvar selectorPath = normalize.lib('selector')\nvar styleCompilerPath = normalize.lib('style-compiler/index')\nvar templateCompilerPath = normalize.lib('template-compiler/index')\nvar templatePreprocessorPath = normalize.lib('template-compiler/preprocessor')\nvar componentNormalizerPath = normalize.lib('component-normalizer')\n\n// dep loaders\nvar styleLoaderPath = normalize.dep('vue-style-loader')\nvar hotReloadAPIPath = normalize.dep('vue-hot-reload-api')\n\nvar hasBabel = false\ntry {\n  hasBabel = !!require('babel-loader')\n} catch (e) {}\n\nvar hasBuble = false\ntry {\n  hasBuble = !!require('buble-loader')\n} catch (e) {}\n\nvar rewriterInjectRE = /\\b(css(?:-loader)?(?:\\?[^!]+)?)(?:!|$)/\n\nvar defaultLang = {\n  template: 'html',\n  styles: 'css',\n  script: 'js'\n}\n\n// When extracting parts from the source vue file, we want to apply the\n// loaders chained before vue-loader, but exclude some loaders that simply\n// produces side effects such as linting.\nfunction getRawRequest (context, excludedPreLoaders) {\n  excludedPreLoaders = excludedPreLoaders || /eslint-loader/\n  return loaderUtils.getRemainingRequest({\n    resource: context.resource,\n    loaderIndex: context.loaderIndex,\n    loaders: context.loaders.filter(loader => !excludedPreLoaders.test(loader.path))\n  })\n}\n\nmodule.exports = function (content) {\n  this.cacheable()\n  var isServer = this.target === 'node'\n  var isProduction = this.minimize || process.env.NODE_ENV === 'production'\n\n  var loaderContext = this\n  var query = loaderUtils.getOptions(this) || {}\n  var options = this.options.__vueOptions__ = Object.assign({}, this.options.vue, this.vue, query)\n  var rawRequest = getRawRequest(this, options.excludedPreLoaders)\n\n  var filePath = this.resourcePath\n  var fileName = path.basename(filePath)\n\n  var context = (this._compiler && this._compiler.context) || this.options.context || process.cwd()\n  var moduleId = 'data-v-' + genId(filePath, context, options.hashKey)\n\n  var cssLoaderOptions = ''\n  if (!isProduction && this.sourceMap && options.cssSourceMap !== false) {\n    cssLoaderOptions += '?sourceMap'\n  }\n  if (isProduction) {\n    cssLoaderOptions += (cssLoaderOptions ? '&' : '?') + 'minimize'\n  }\n\n  var bubleOptions = hasBuble && options.buble\n    ? '?' + JSON.stringify(options.buble)\n    : ''\n\n  var templateCompilerOptions = '?' + JSON.stringify({\n    id: moduleId,\n    transformToRequire: options.transformToRequire,\n    preserveWhitespace: options.preserveWhitespace,\n    buble: options.buble,\n    // only pass compilerModules if it's a path string\n    compilerModules: typeof options.compilerModules === 'string'\n      ? options.compilerModules\n      : undefined\n  })\n\n  var defaultLoaders = {\n    html: templateCompilerPath + templateCompilerOptions,\n    css: styleLoaderPath + '!' + 'css-loader' + cssLoaderOptions,\n    js: hasBuble ? ('buble-loader' + bubleOptions) : hasBabel ? 'babel-loader' : ''\n  }\n\n  // check if there are custom loaders specified via\n  // webpack config, otherwise use defaults\n  var loaders = Object.assign({}, defaultLoaders, options.loaders)\n  var preLoaders = options.preLoaders || {}\n  var postLoaders = options.postLoaders || {}\n\n  function getRequire (type, part, index, scoped) {\n    return 'require(' +\n      getRequireString(type, part, index, scoped) +\n    ')'\n  }\n\n  function getRequireString (type, part, index, scoped) {\n    return loaderUtils.stringifyRequest(loaderContext,\n      // disable all configuration loaders\n      '!!' +\n      // get loader string for pre-processors\n      getLoaderString(type, part, index, scoped) +\n      // select the corresponding part from the vue file\n      getSelectorString(type, index || 0) +\n      // the url to the actual vue file, including remaining requests\n      rawRequest\n    )\n  }\n\n  function getRequireForImport (type, impt, scoped) {\n    return 'require(' +\n      getRequireForImportString(type, impt, scoped) +\n    ')'\n  }\n\n  function getRequireForImportString (type, impt, scoped) {\n    return loaderUtils.stringifyRequest(loaderContext,\n      '!!' +\n      getLoaderString(type, impt, -1, scoped) +\n      impt.src\n    )\n  }\n\n  function addCssModulesToLoader (loader, part, index) {\n    if (!part.module) return loader\n    var option = options.cssModules || {}\n    var DEFAULT_OPTIONS = {\n      modules: true,\n      importLoaders: true\n    }\n    var OPTIONS = {\n      localIdentName: '[hash:base64]'\n    }\n    return loader.replace(/((?:^|!)css(?:-loader)?)(\\?[^!]*)?/, function (m, $1, $2) {\n      // $1: !css-loader\n      // $2: ?a=b\n      var query = loaderUtils.parseQuery($2 || '?')\n      Object.assign(query, OPTIONS, option, DEFAULT_OPTIONS)\n      if (index !== -1) {\n        // Note:\n        //   Class name is generated according to its filename.\n        //   Different <style> tags in the same .vue file may generate same names.\n        //   Append `_[index]` to class name to avoid this.\n        query.localIdentName += '_' + index\n      }\n      return $1 + '?' + JSON.stringify(query)\n    })\n  }\n\n  function buildCustomBlockLoaderString (attrs) {\n    var noSrcAttrs = Object.assign({}, attrs)\n    delete noSrcAttrs.src\n    var qs = querystring.stringify(noSrcAttrs)\n    return qs ? '?' + qs : qs\n  }\n\n  // stringify an Array of loader objects\n  function stringifyLoaders (loaders) {\n    return loaders.map(function (obj) {\n      return obj && typeof obj === 'object' && typeof obj.loader === 'string'\n        ? obj.loader + (obj.options ? '?' + JSON.stringify(obj.options) : '')\n        : obj\n    }).join('!')\n  }\n\n  function getLoaderString (type, part, index, scoped) {\n    var loader = getRawLoaderString(type, part, index, scoped)\n    var lang = getLangString(type, part)\n    if (preLoaders[lang]) {\n      loader = loader + ensureBang(preLoaders[lang])\n    }\n    if (postLoaders[lang]) {\n      loader = ensureBang(postLoaders[lang]) + loader\n    }\n    return loader\n  }\n\n  function getLangString (type, part) {\n    if (type === 'script' || type === 'template' || type === 'styles') {\n      return part.lang || defaultLang[type]\n    } else {\n      return type\n    }\n  }\n\n  function getRawLoaderString (type, part, index, scoped) {\n    var lang = part.lang || defaultLang[type]\n    var loader = loaders[lang]\n\n    var styleCompiler = ''\n    if (type === 'styles') {\n      styleCompiler = styleCompilerPath + '?' + JSON.stringify({\n        id: moduleId,\n        scoped: !!scoped,\n        hasInlineConfig: !!query.postcss\n      }) + '!'\n    }\n\n    var injectString = (type === 'script' && query.inject)\n      ? 'inject-loader!'\n      : ''\n\n    if (loader != null) {\n      if (Array.isArray(loader)) {\n        loader = stringifyLoaders(loader)\n      } else if (typeof loader === 'object') {\n        loader = stringifyLoaders([loader])\n      }\n      if (type === 'styles') {\n        // add css modules\n        loader = addCssModulesToLoader(loader, part, index)\n        // inject rewriter before css loader for extractTextPlugin use cases\n        if (rewriterInjectRE.test(loader)) {\n          loader = loader.replace(rewriterInjectRE, function (m, $1) {\n            return ensureBang($1) + styleCompiler\n          })\n        } else {\n          loader = ensureBang(loader) + styleCompiler\n        }\n      }\n      // if user defines custom loaders for html, add template compiler to it\n      if (type === 'template' && loader.indexOf(defaultLoaders.html) < 0) {\n        loader = defaultLoaders.html + '!' + loader\n      }\n      return injectString + ensureBang(loader)\n    } else {\n      // unknown lang, infer the loader to be used\n      switch (type) {\n        case 'template':\n          return defaultLoaders.html + '!' + templatePreprocessorPath + '?raw&engine=' + lang + '!'\n        case 'styles':\n          loader = addCssModulesToLoader(defaultLoaders.css, part, index)\n          return loader + '!' + styleCompiler + ensureBang(ensureLoader(lang))\n        case 'script':\n          return injectString + ensureBang(ensureLoader(lang))\n        default:\n          loader = loaders[type]\n          if (Array.isArray(loader)) {\n            loader = stringifyLoaders(loader)\n          }\n          return ensureBang(loader + buildCustomBlockLoaderString(part.attrs))\n      }\n    }\n  }\n\n  // sass => sass-loader\n  // sass-loader => sass-loader\n  // sass?indentedsyntax!css => sass-loader?indentedSyntax!css-loader\n  function ensureLoader (lang) {\n    return lang.split('!').map(function (loader) {\n      return loader.replace(/^([\\w-]+)(\\?.*)?/, function (_, name, query) {\n        return (/-loader$/.test(name) ? name : (name + '-loader')) + (query || '')\n      })\n    }).join('!')\n  }\n\n  function getSelectorString (type, index) {\n    return selectorPath +\n      '?type=' + ((type === 'script' || type === 'template' || type === 'styles') ? type : 'customBlocks') +\n      '&index=' + index + '!'\n  }\n\n  function ensureBang (loader) {\n    if (loader.charAt(loader.length - 1) !== '!') {\n      return loader + '!'\n    } else {\n      return loader\n    }\n  }\n\n  var output = ''\n  var parts = parse(content, fileName, this.sourceMap)\n  var hasScoped = parts.styles.some(function (s) { return s.scoped })\n\n  // css modules\n  var cssModules\n\n  // add requires for styles\n  if (parts.styles.length) {\n    output += '\\n/* styles */\\n'\n    var hasModules = false\n    parts.styles.forEach(function (style, i) {\n      // require style\n      var requireString = style.src\n        ? getRequireForImport('styles', style, style.scoped)\n        : getRequire('styles', style, i, style.scoped)\n\n      var moduleName = (style.module === true) ? '$style' : style.module\n      // setCssModule\n      if (moduleName) {\n        if (!cssModules) {\n          cssModules = {}\n        }\n        if (!hasModules) {\n          hasModules = true\n          output += 'var cssModules = {}\\n'\n        }\n        if (moduleName in cssModules) {\n          loaderContext.emitError('CSS module name \"' + moduleName + '\" is not unique!')\n          output += requireString\n        } else {\n          cssModules[moduleName] = true\n\n          // `(vue-)style-loader` exposes the name-to-hash map directly\n          // `css-loader` exposes it in `.locals`\n          // add `.locals` if the user configured to not use style-loader.\n          if (requireString.indexOf('style-loader') < 0) {\n            requireString += '.locals'\n          }\n\n          output += 'cssModules[\"' + moduleName + '\"] = ' + requireString + '\\n'\n        }\n      } else {\n        output += requireString + '\\n'\n      }\n    })\n    output += '\\n'\n  }\n\n  // we require the component normalizer function, and call it like so:\n  // normalizeComponent(\n  //   scriptExports,\n  //   compiledTemplate,\n  //   scopeId,\n  //   cssModules\n  // )\n  output += 'var Component = require(' +\n    loaderUtils.stringifyRequest(loaderContext, '!' + componentNormalizerPath) +\n  ')(\\n'\n\n  // <script>\n  output += '  /* script */\\n  '\n  var script = parts.script\n  if (script) {\n    output += script.src\n      ? getRequireForImport('script', script)\n      : getRequire('script', script)\n    // inject loader interop\n    if (query.inject) {\n      output += '(injections)'\n    }\n  } else {\n    output += 'null'\n  }\n  output += ',\\n'\n\n  // <template>\n  output += '  /* template */\\n  '\n  var template = parts.template\n  if (template) {\n    output += template.src\n      ? getRequireForImport('template', template)\n      : getRequire('template', template)\n  } else {\n    output += 'null'\n  }\n  output += ',\\n'\n\n  // scopeId\n  output += '  /* scopeId */\\n  '\n  output += (hasScoped ? JSON.stringify(moduleId) : 'null') + ',\\n'\n\n  // cssModules\n  output += '  /* cssModules */\\n  '\n  if (cssModules) {\n    // inject style modules as computed properties\n    output += 'cssModules'\n  } else {\n    output += 'null'\n  }\n  output += '\\n'\n\n  // close normalizeComponent call\n  output += ')\\n'\n\n  // development-only code\n  if (!isProduction) {\n    // add filename in dev\n    output += 'Component.options.__file = ' + JSON.stringify(filePath) + '\\n'\n    // check named exports\n    output +=\n      'if (Component.esModule && Object.keys(Component.esModule).some(function (key) {' +\n        'return key !== \"default\" && key !== \"__esModule\"' +\n      '})) {' +\n        'console.error(\"named exports are not supported in *.vue files.\")' +\n      '}\\n'\n    // check functional components used with templates\n    if (template) {\n      output +=\n        'if (Component.options.functional) {' +\n          'console.error(\"' +\n          '[vue-loader] ' + fileName + ': functional components are not ' +\n          'supported with templates, they should use render functions.' +\n        '\")}\\n'\n    }\n  }\n\n  // add requires for customBlocks\n  if (parts.customBlocks && parts.customBlocks.length) {\n    var addedPrefix = false\n\n    parts.customBlocks.forEach(function (customBlock, i) {\n      if (loaders[customBlock.type]) {\n        // require customBlock\n        customBlock.src = customBlock.attrs.src\n        var requireString = customBlock.src\n          ? getRequireForImport(customBlock.type, customBlock)\n          : getRequire(customBlock.type, customBlock, i)\n\n        if (!addedPrefix) {\n          output += '\\n/* customBlocks */\\n'\n          addedPrefix = true\n        }\n\n        output +=\n          'var customBlock = ' + requireString + '\\n' +\n          'if (typeof customBlock === \"function\") {' +\n            'customBlock(Component)' +\n          '}\\n'\n      }\n    })\n\n    output += '\\n'\n  }\n\n  if (!query.inject) {\n    // hot reload\n    if (\n      !isServer &&\n      !isProduction &&\n      (parts.script || parts.template)\n    ) {\n      output +=\n        '\\n/* hot reload */\\n' +\n        'if (module.hot) {(function () {\\n' +\n        '  var hotAPI = require(\"' + hotReloadAPIPath + '\")\\n' +\n        '  hotAPI.install(require(\"vue\"), false)\\n' +\n        '  if (!hotAPI.compatible) return\\n' +\n        '  module.hot.accept()\\n' +\n        '  if (!module.hot.data) {\\n' +\n        // initial insert\n        '    hotAPI.createRecord(\"' + moduleId + '\", Component.options)\\n' +\n        '  } else {\\n'\n      // update\n      if (cssModules) {\n        output +=\n        '    if (module.hot.data.cssModules && JSON.stringify(module.hot.data.cssModules) !== JSON.stringify(cssModules)) {\\n' +\n        '      delete Component.options._Ctor\\n' +\n        '    }\\n'\n      }\n      output +=\n        '    hotAPI.reload(\"' + moduleId + '\", Component.options)\\n' +\n        '  }\\n'\n      if (cssModules) {\n        // save cssModules\n        output +=\n        '  module.hot.dispose(function (data) {\\n' +\n        '    data.cssModules = cssModules\\n' +\n        '  })\\n'\n      }\n      output += '})()}\\n'\n    }\n    // final export\n    if (options.esModule) {\n      output += '\\nexports.__esModule = true;\\nexports[\"default\"] = Component.exports\\n'\n    } else {\n      output += '\\nmodule.exports = Component.exports\\n'\n    }\n  } else {\n    // inject-loader support\n    output =\n      '\\n/* dependency injection */\\n' +\n      'module.exports = function (injections) {\\n' + output + '\\n' +\n      '\\nreturn Component.exports\\n}'\n  }\n\n  // done\n  return output\n}\n","/home/travis/build/npmtest/node-npmtest-vue-loader/node_modules/vue-loader/lib/parser.js":"var compiler = require('vue-template-compiler')\nvar cache = require('lru-cache')(100)\nvar hash = require('hash-sum')\nvar SourceMapGenerator = require('source-map').SourceMapGenerator\n\nvar splitRE = /\\r?\\n/g\nvar emptyRE = /^(?:\\/\\/)?\\s*$/\n\nmodule.exports = function (content, filename, needMap) {\n  var cacheKey = hash(filename + content)\n  // source-map cache busting for hot-reloadded modules\n  var filenameWithHash = filename + '?' + cacheKey\n  var output = cache.get(cacheKey)\n  if (output) return output\n  output = compiler.parseComponent(content, { pad: 'line' })\n  if (needMap) {\n    if (output.script && !output.script.src) {\n      output.script.map = generateSourceMap(\n        filenameWithHash,\n        content,\n        output.script.content\n      )\n    }\n    if (output.styles) {\n      output.styles.forEach(style => {\n        if (!style.src) {\n          style.map = generateSourceMap(\n            filenameWithHash,\n            content,\n            style.content\n          )\n        }\n      })\n    }\n  }\n  cache.set(cacheKey, output)\n  return output\n}\n\nfunction generateSourceMap (filename, source, generated) {\n  var map = new SourceMapGenerator()\n  map.setSourceContent(filename, source)\n  generated.split(splitRE).forEach((line, index) => {\n    if (!emptyRE.test(line)) {\n      map.addMapping({\n        source: filename,\n        original: {\n          line: index + 1,\n          column: 0\n        },\n        generated: {\n          line: index + 1,\n          column: 0\n        }\n      })\n    }\n  })\n  return map.toJSON()\n}\n","/home/travis/build/npmtest/node-npmtest-vue-loader/node_modules/vue-loader/lib/utils/gen-id.js":"// utility for generating a uid for each component file\n// used in scoped CSS rewriting\nvar path = require('path')\nvar hash = require('hash-sum')\nvar cache = Object.create(null)\nvar sepRE = new RegExp(path.sep.replace('\\\\', '\\\\\\\\'), 'g')\n\nmodule.exports = function genId (file, context, key) {\n  var contextPath = context.split(path.sep)\n  var rootId = contextPath[contextPath.length - 1]\n  file = rootId + '/' + path.relative(context, file).replace(sepRE, '/') + (key || '')\n  return cache[file] || (cache[file] = hash(file))\n}\n","/home/travis/build/npmtest/node-npmtest-vue-loader/node_modules/vue-loader/lib/utils/normalize.js":"var IS_TEST = !!process.env.VUE_LOADER_TEST\nvar fs = require('fs')\nvar path = require('path')\n\nexports.lib = function (file) {\n  return path.resolve(__dirname, '../', file)\n}\n\nexports.dep = function (dep) {\n  if (IS_TEST) {\n    return dep\n  } else if (fs.existsSync(path.resolve(__dirname, '../../node_modules', dep))) {\n    // npm 2 or npm linked\n    return 'vue-loader/node_modules/' + dep\n  } else {\n    // npm 3\n    return dep\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vue-loader/node_modules/vue-loader/lib/component-normalizer.js":"// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = Object.create(options.computed || null)\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n    options.computed = computed\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vue-loader/node_modules/vue-loader/lib/selector.js":"// this is a utility loader that takes a *.vue file, parses it and returns\n// the requested language block, e.g. the content inside <template>, for\n// further processing.\n\nvar path = require('path')\nvar parse = require('./parser')\nvar loaderUtils = require('loader-utils')\n\nmodule.exports = function (content) {\n  this.cacheable()\n  var query = loaderUtils.getOptions(this) || {}\n  var filename = path.basename(this.resourcePath)\n  var parts = parse(content, filename, this.sourceMap)\n  var part = parts[query.type]\n  if (Array.isArray(part)) {\n    part = part[query.index]\n  }\n  this.callback(null, part.content, part.map)\n}\n","/home/travis/build/npmtest/node-npmtest-vue-loader/node_modules/vue-loader/lib/style-compiler/load-postcss-config.js":"var load = require('postcss-load-config')\n\nvar loaded\n\nfunction isObject (val) {\n  return val && typeof val === 'object'\n}\n\nmodule.exports = function loadPostcssConfig (inlineConfig) {\n  if (process.env.VUE_LOADER_TEST || !loaded) {\n    loaded = load({}, null, { argv: false }).catch(() => {\n      // postcss-load-config throws error when no config file is found,\n      // but for us it's optional.\n    })\n  }\n\n  return loaded.then(config => {\n    var plugins = []\n    var options = {}\n\n    // inline postcss options for vue-loader\n    if (typeof inlineConfig === 'function') {\n      inlineConfig = inlineConfig.call(this, this)\n    }\n    if (Array.isArray(inlineConfig)) {\n      plugins = inlineConfig\n    } else if (isObject(inlineConfig)) {\n      plugins = inlineConfig.plugins || []\n      options = inlineConfig.options || {}\n    }\n\n    // merge postcss config file\n    if (config && config.plugins) {\n      plugins = plugins.concat(config.plugins)\n    }\n    if (config && config.options) {\n      options = Object.assign({}, config.options, options)\n    }\n\n    return {\n      plugins,\n      options\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-vue-loader/node_modules/vue-loader/lib/template-compiler/preprocessor.js":"// loader for pre-processing templates with e.g. pug\n\nvar cons = require('consolidate')\nvar loaderUtils = require('loader-utils')\nvar extname = require('path').extname\n\nmodule.exports = function (content) {\n  this.cacheable && this.cacheable()\n  var callback = this.async()\n  var opt = loaderUtils.getOptions(this) || {}\n\n  // this is never documented and should be deprecated\n  // but we'll keep it so we don't break stuff\n  var vue = this.options.__vueOptions__\n  if (vue && vue.template) {\n    for (var key in vue.template) {\n      opt[key] = vue.template[key]\n    }\n  }\n\n  function exportContent (content) {\n    if (opt.raw) {\n      callback(null, content)\n    } else {\n      callback(null, 'module.exports = ' + JSON.stringify(content))\n    }\n  }\n\n  // with no engine given, use the file extension as engine\n  if (!opt.engine) {\n    opt.engine = extname(this.request).substr(1).toLowerCase()\n  }\n\n  if (!cons[opt.engine]) {\n    return callback(new Error(\n      'Template engine \\'' + opt.engine + '\\' ' +\n      'isn\\'t available in Consolidate.js'\n    ))\n  }\n\n  // for relative includes\n  opt.filename = this.resourcePath\n\n  cons[opt.engine].render(content, opt, function (err, html) {\n    if (err) {\n      return callback(err)\n    }\n    exportContent(html)\n  })\n}\n"}